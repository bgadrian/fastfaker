// Code generated by make generate; DO NOT EDIT.
package faker

import (
	"strconv"
)

type fakerer func(*Faker) string

var templateVariables map[string]fakerer

func init() {
	templateVariables = getTemplateVars()
}

func getTemplateVars() map[string]fakerer {
	templateVariables := make(map[string]fakerer, 100)
	
	templateVariables["avatarurl"] = func(f *Faker) string { return f.AvatarURL() }
	templateVariables["beeralcohol"] = func(f *Faker) string { return f.BeerAlcohol() }
	templateVariables["beerblg"] = func(f *Faker) string { return f.BeerBlg() }
	templateVariables["beerhop"] = func(f *Faker) string { return f.BeerHop() }
	templateVariables["beeribu"] = func(f *Faker) string { return f.BeerIbu() }
	templateVariables["beermalt"] = func(f *Faker) string { return f.BeerMalt() }
	templateVariables["beername"] = func(f *Faker) string { return f.BeerName() }
	templateVariables["beerstyle"] = func(f *Faker) string { return f.BeerStyle() }
	templateVariables["beeryeast"] = func(f *Faker) string { return f.BeerYeast() }
	templateVariables["binary"] = func(f *Faker) string { return f.Binary() }
	templateVariables["booltext"] = func(f *Faker) string { return f.BoolText() }
	templateVariables["browser"] = func(f *Faker) string { return f.Browser() }
	templateVariables["bs"] = func(f *Faker) string { return f.BS() }
	templateVariables["buzzword"] = func(f *Faker) string { return f.BuzzWord() }
	templateVariables["carmaker"] = func(f *Faker) string { return f.CarMaker() }
	templateVariables["carmodel"] = func(f *Faker) string { return f.CarModel() }
	templateVariables["chromeuseragent"] = func(f *Faker) string { return f.ChromeUserAgent() }
	templateVariables["city"] = func(f *Faker) string { return f.City() }
	templateVariables["color"] = func(f *Faker) string { return f.Color() }
	templateVariables["company"] = func(f *Faker) string { return f.Company() }
	templateVariables["companysuffix"] = func(f *Faker) string { return f.CompanySuffix() }
	templateVariables["country"] = func(f *Faker) string { return f.Country() }
	templateVariables["countryabr"] = func(f *Faker) string { return f.CountryAbr() }
	templateVariables["creditcardcvv"] = func(f *Faker) string { return f.CreditCardCvv() }
	templateVariables["creditcardexp"] = func(f *Faker) string { return f.CreditCardExp() }
	templateVariables["creditcardnumber"] = func(f *Faker) string { return strconv.Itoa(int(f.CreditCardNumber())) }
	templateVariables["creditcardnumberluhn"] = func(f *Faker) string { return strconv.Itoa(int(f.CreditCardNumberLuhn())) }
	templateVariables["creditcardtype"] = func(f *Faker) string { return f.CreditCardType() }
	templateVariables["currencylong"] = func(f *Faker) string { return f.CurrencyLong() }
	templateVariables["currencyshort"] = func(f *Faker) string { return f.CurrencyShort() }
	templateVariables["datecurrentyearstr"] = func(f *Faker) string { return f.DateCurrentYearStr() }
	templateVariables["datestr"] = func(f *Faker) string { return f.DateStr() }
	templateVariables["day"] = func(f *Faker) string { return strconv.Itoa(int(f.Day())) }
	templateVariables["digit"] = func(f *Faker) string { return f.Digit() }
	templateVariables["domainname"] = func(f *Faker) string { return f.DomainName() }
	templateVariables["domainsuffix"] = func(f *Faker) string { return f.DomainSuffix() }
	templateVariables["email"] = func(f *Faker) string { return f.Email() }
	templateVariables["extension"] = func(f *Faker) string { return f.Extension() }
	templateVariables["firefoxuseragent"] = func(f *Faker) string { return f.FirefoxUserAgent() }
	templateVariables["firstname"] = func(f *Faker) string { return f.FirstName() }
	templateVariables["float32"] = func(f *Faker) string { return strconv.FormatFloat(float64(f.Float32()), 103, -1, 32) }
	templateVariables["float64"] = func(f *Faker) string { return strconv.FormatFloat(float64(f.Float64()), 103, -1, 64) }
	templateVariables["float64unary"] = func(f *Faker) string { return strconv.FormatFloat(float64(f.Float64Unary()), 103, -1, 64) }
	templateVariables["fueltype"] = func(f *Faker) string { return f.FuelType() }
	templateVariables["gender"] = func(f *Faker) string { return f.Gender() }
	templateVariables["hackerabbreviation"] = func(f *Faker) string { return f.HackerAbbreviation() }
	templateVariables["hackeradjective"] = func(f *Faker) string { return f.HackerAdjective() }
	templateVariables["hackeringverb"] = func(f *Faker) string { return f.HackerIngverb() }
	templateVariables["hackernoun"] = func(f *Faker) string { return f.HackerNoun() }
	templateVariables["hackerphrase"] = func(f *Faker) string { return f.HackerPhrase() }
	templateVariables["hackerverb"] = func(f *Faker) string { return f.HackerVerb() }
	templateVariables["hexcolor"] = func(f *Faker) string { return f.HexColor() }
	templateVariables["hipsterparagraphavg"] = func(f *Faker) string { return f.HipsterParagraphAvg() }
	templateVariables["hipstersentenceavg"] = func(f *Faker) string { return f.HipsterSentenceAvg() }
	templateVariables["hipsterword"] = func(f *Faker) string { return f.HipsterWord() }
	templateVariables["hour"] = func(f *Faker) string { return strconv.Itoa(int(f.Hour())) }
	templateVariables["httpmethod"] = func(f *Faker) string { return f.HTTPMethod() }
	templateVariables["int16"] = func(f *Faker) string { return strconv.Itoa(int(f.Int16())) }
	templateVariables["int32"] = func(f *Faker) string { return strconv.Itoa(int(f.Int32())) }
	templateVariables["int64"] = func(f *Faker) string { return strconv.Itoa(int(f.Int64())) }
	templateVariables["int64positive"] = func(f *Faker) string { return strconv.Itoa(int(f.Int64Positive())) }
	templateVariables["int8"] = func(f *Faker) string { return strconv.Itoa(int(f.Int8())) }
	templateVariables["ipv4address"] = func(f *Faker) string { return f.IPv4Address() }
	templateVariables["ipv6address"] = func(f *Faker) string { return f.IPv6Address() }
	templateVariables["jobdescriptor"] = func(f *Faker) string { return f.JobDescriptor() }
	templateVariables["joblevel"] = func(f *Faker) string { return f.JobLevel() }
	templateVariables["jobtitle"] = func(f *Faker) string { return f.JobTitle() }
	templateVariables["lastname"] = func(f *Faker) string { return f.LastName() }
	templateVariables["latitude"] = func(f *Faker) string { return strconv.FormatFloat(float64(f.Latitude()), 103, -1, 64) }
	templateVariables["letter"] = func(f *Faker) string { return f.Letter() }
	templateVariables["longitude"] = func(f *Faker) string { return strconv.FormatFloat(float64(f.Longitude()), 103, -1, 64) }
	templateVariables["mimetype"] = func(f *Faker) string { return f.MimeType() }
	templateVariables["minute"] = func(f *Faker) string { return strconv.Itoa(int(f.Minute())) }
	templateVariables["month"] = func(f *Faker) string { return f.Month() }
	templateVariables["name"] = func(f *Faker) string { return f.Name() }
	templateVariables["nameprefix"] = func(f *Faker) string { return f.NamePrefix() }
	templateVariables["namesuffix"] = func(f *Faker) string { return f.NameSuffix() }
	templateVariables["nanosecond"] = func(f *Faker) string { return strconv.Itoa(int(f.NanoSecond())) }
	templateVariables["operauseragent"] = func(f *Faker) string { return f.OperaUserAgent() }
	templateVariables["paragraphavg"] = func(f *Faker) string { return f.ParagraphAvg() }
	templateVariables["passwordfull"] = func(f *Faker) string { return f.PasswordFull() }
	templateVariables["phone"] = func(f *Faker) string { return f.Phone() }
	templateVariables["phoneformatted"] = func(f *Faker) string { return f.PhoneFormatted() }
	templateVariables["safariuseragent"] = func(f *Faker) string { return f.SafariUserAgent() }
	templateVariables["safecolor"] = func(f *Faker) string { return f.SafeColor() }
	templateVariables["second"] = func(f *Faker) string { return strconv.Itoa(int(f.Second())) }
	templateVariables["sentenceavg"] = func(f *Faker) string { return f.SentenceAvg() }
	templateVariables["simplestatuscode"] = func(f *Faker) string { return strconv.Itoa(int(f.SimpleStatusCode())) }
	templateVariables["ssn"] = func(f *Faker) string { return f.SSN() }
	templateVariables["state"] = func(f *Faker) string { return f.State() }
	templateVariables["stateabr"] = func(f *Faker) string { return f.StateAbr() }
	templateVariables["statuscode"] = func(f *Faker) string { return strconv.Itoa(int(f.StatusCode())) }
	templateVariables["street"] = func(f *Faker) string { return f.Street() }
	templateVariables["streetname"] = func(f *Faker) string { return f.StreetName() }
	templateVariables["streetnumber"] = func(f *Faker) string { return f.StreetNumber() }
	templateVariables["streetprefix"] = func(f *Faker) string { return f.StreetPrefix() }
	templateVariables["streetsuffix"] = func(f *Faker) string { return f.StreetSuffix() }
	templateVariables["timezone"] = func(f *Faker) string { return f.TimeZone() }
	templateVariables["timezoneabv"] = func(f *Faker) string { return f.TimeZoneAbv() }
	templateVariables["timezonefull"] = func(f *Faker) string { return f.TimeZoneFull() }
	templateVariables["timezoneoffset"] = func(f *Faker) string { return strconv.FormatFloat(float64(f.TimeZoneOffset()), 103, -1, 32) }
	templateVariables["transmissiongeartype"] = func(f *Faker) string { return f.TransmissionGearType() }
	templateVariables["uint16"] = func(f *Faker) string { return strconv.Itoa(int(f.Uint16())) }
	templateVariables["uint32"] = func(f *Faker) string { return strconv.Itoa(int(f.Uint32())) }
	templateVariables["uint64"] = func(f *Faker) string { return strconv.Itoa(int(f.Uint64())) }
	templateVariables["uint8"] = func(f *Faker) string { return strconv.Itoa(int(f.Uint8())) }
	templateVariables["url"] = func(f *Faker) string { return f.URL() }
	templateVariables["useragent"] = func(f *Faker) string { return f.UserAgent() }
	templateVariables["username"] = func(f *Faker) string { return f.Username() }
	templateVariables["uuid"] = func(f *Faker) string { return f.UUID() }
	templateVariables["vehicletype"] = func(f *Faker) string { return f.VehicleType() }
	templateVariables["weekday"] = func(f *Faker) string { return f.WeekDay() }
	templateVariables["word"] = func(f *Faker) string { return f.Word() }
	templateVariables["year"] = func(f *Faker) string { return strconv.Itoa(int(f.Year())) }
	templateVariables["zip"] = func(f *Faker) string { return f.Zip() }
	
	return templateVariables
}
